{"version":3,"sources":["pages/Home.js","logos/spotifyLogo.png","logos/appleMusicLogo.png","logos/youtubeLogo.png","logos/instagramLogo.png","components/Track.js","components/AppLogoWithLink.js","components/ArtistProfileHeader.js","pages/ArtistProfile.js","pages/Map.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","email","setEmail","to","value","onChange","e","target","placeholder","type","onClick","requestBody","axios","post","href","Track","artistName","track","artistDatabaseId","className","src","album","images","url","alt","name","artists","length","featuresString","artist","slice","createFeaturesString","id","onPlay","addSnippetPlayed","preview_url","trackName","audios","document","getElementsByClassName","clickedAudio","getElementById","playPauseButtons","clickedPlayPauseButton","paused","pause","play","innerHTML","currentTime","ontimeupdate","style","width","size","height","backgroundColor","playOrPauseTrack","AppLogoWithLink","app","link","API_URL","addSpotifyProfileVisit","spotifyLogo","addAppleMusicProfileVisit","appleMusicLogo","addYoutubeProfileVisit","youtubeLogo","addInstagramProfileVisit","instagramLogo","ArtistProfileHeader","artistPicture","releasedMusic","ArtistProfile","setArtistName","setArtistDatabaseId","setArtistPicture","setReleasedMusic","links","setLinks","topTracks","setTopTracks","getArtistsIds","a","artistIds","localStorage","getItem","split","getSpotifyData","spotifyId","response","data","getDataBaseData","dataBaseId","useEffect","then","ids","spotifyData","console","log","albums","trackCount","singlesCount","albumCount","album_type","total_tracks","countTracks","dataBaseData","_id","spotifyLink","appleMusicLink","youtubeLink","instagramLink","addTrapMapProfileVisit","map","Map","mapContainer","useRef","berlinCenter","berlinBounds","mapboxgl","accessToken","features","get","res","feature","picture","spotifyID","coordinates","push","artistToFeatures","current","container","center","zoom","minZoom","maxBounds","on","addSource","i","el","createElement","Marker","setLngLat","geometry","addTo","markers","addEventListener","artistSpotifyId","properties","Storage","setItem","window","location","backgroundImage","Number","getZoom","ref","Nav","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.499de209.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport { useState } from 'react'\nimport axios from 'axios'\n\nfunction Home() {\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n    const [email, setEmail] = useState(\"\")\n\n    const singUpForBetaKey = () => {\n        const requestBody = {email}\n        axios.post(`${API_URL}/traffic/addSignUpForBetaKey`, requestBody)\n    }\n\n    return (\n        <div>\n            <h1>welcome to trap map</h1>\n\n            <p>new plattfrom to discover music: no algorithms, no playlists, just you and the music</p>\n            <Link to=\"/map\">\n                <button>check out the demo version</button>\n            </Link>\n\n            <p>leveraging blockchain technology to build the plattform with you</p>\n\n            <h5>some timeline</h5>\n\n            <h2>sign-up for the beta-key of the official trap map app</h2>\n            <input \n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                placeholder=\"your email adress\"\n                type=\"email\"\n            >\n            </input>\n\n            <button onClick={singUpForBetaKey}>sign up</button>\n\n            <h2>do you want to get on the map? DM us on insta</h2><a href=\"https://www.instagram.com/mapmusic.berlin/\">insta</a>\n\n        </div>\n    )\n}\n\nexport default Home","export default __webpack_public_path__ + \"static/media/spotifyLogo.8eef091b.png\";","export default __webpack_public_path__ + \"static/media/appleMusicLogo.2228dbd7.png\";","export default __webpack_public_path__ + \"static/media/youtubeLogo.6b5588fd.png\";","export default __webpack_public_path__ + \"static/media/instagramLogo.f3459bc3.png\";","import axios from 'axios'\nimport { useState } from 'react'\n\nfunction Track({artistName, track, artistDatabaseId}) {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    const createFeaturesString = (artists) => {\n\n        if (artists.length === 1){\n            return ''\n        }\n        let featuresString = \"feat: \"\n        for (let artist of artists){\n            if (artistName !== artist.name){\n                featuresString += `${artist.name}, `\n            } \n        }\n        return featuresString.slice(0, -2)\n    }\n\n    const playOrPauseTrack = (trackName) => {\n        const audios = document.getElementsByClassName('audioPlayer')\n        const clickedAudio = document.getElementById(`audioPlayer:${trackName}`)\n        \n        const playPauseButtons = document.getElementsByClassName('playPauseButton')\n        const clickedPlayPauseButton = document.getElementById(`playPauseButton:${trackName}`)\n        \n        if (clickedAudio.paused){\n            for (let audio of audios){\n                audio.pause()\n            }\n            clickedAudio.play()\n\n\n            for (let playPauseButton of playPauseButtons){\n                playPauseButton.innerHTML = 'play'\n            }\n            clickedPlayPauseButton.innerHTML = 'pause'\n        \n        } else {\n            clickedAudio.pause()\n            clickedPlayPauseButton.innerHTML = 'play'\n        }\n\n        \n        const currentTime = document.getElementById(`timeInTrack:${trackName}`)\n        \n        clickedAudio.ontimeupdate = () => {\n            if (clickedAudio.currentTime >= 30){\n                clickedPlayPauseButton.innerHTML = 'play'\n                currentTime.style.width = '0px'\n            }\n\n            if (clickedAudio.currentTime < 30){\n                let size = (250 / 30) * clickedAudio.currentTime\n                currentTime.style.width = `${size}px`\n                currentTime.style.height = '10px'\n                currentTime.style.backgroundColor = 'black'\n            }\n        }\n    }\n\n    \n\n    const addSnippetPlayed = (artistDatabaseId) => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addSnippetPlayed`, requestBody)\n    }\n\n\n    return (\n        <div className=\"track\">\n            <img className=\"trackCover\" src={track.album.images[1].url} alt=\"track cover\"/>\n\n            <div className=\"trackTitleAndTimebar\">\n                <h4>{`${track.name} ${createFeaturesString(track.artists)}`}</h4>\n                <div className=\"maxTime\">\n                    <div id={`timeInTrack:${track.name}`}></div>\n                </div>\n            </div>\n\n            <audio id={`audioPlayer:${track.name}`} className='audioPlayer' onPlay={() => {addSnippetPlayed(artistDatabaseId)}}>\n                <source src={track.preview_url} type=\"audio/mp3\" />\n            </audio> \n\n            <div className=\"playPauseButtonWrapper\">\n                <button id={`playPauseButton:${track.name}`} className='playPauseButton' onClick={() => {playOrPauseTrack(track.name)}}>play</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Track\n","import axios from 'axios'\n\nimport spotifyLogo from '../logos/spotifyLogo.png'\nimport appleMusicLogo from '../logos/appleMusicLogo.png'\nimport youtubeLogo from '../logos/youtubeLogo.png'\nimport instagramLogo from '../logos/instagramLogo.png'\n\nfunction AppLogoWithLink({app, link, artistDatabaseId}) {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    const addSpotifyProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addSpotifyProfileVisit`, requestBody)\n    }\n\n    const addAppleMusicProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addAppleMusicProfileVisit`, requestBody)\n    }\n\n    const addYoutubeProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addYoutubeProfileVisit`, requestBody)\n    }\n\n    const addInstagramProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addInstagramProfileVisit`, requestBody)\n    }\n\n\n    \n    if (app === \"spotify\"){\n        return (\n            <a href={link} onClick={() => {addSpotifyProfileVisit()}}>\n                <img className=\"appLogo\" src={spotifyLogo} alt=\"spotify logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"appleMusic\"){\n        return (\n            <a href={link} onClick={() => {addAppleMusicProfileVisit()}}>\n                <img className=\"appLogo\" src={appleMusicLogo} alt=\"apple music logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"youtube\"){\n        return (\n            <a href={link} onClick={() => {addYoutubeProfileVisit()}}>\n                <img className=\"appLogo\" src={youtubeLogo} alt=\"youtube logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"instagram\"){\n        return (\n            <a href={link} onClick={() => {addInstagramProfileVisit()}}>\n                <img  className=\"appLogo\" src={instagramLogo} alt=\"instagram logo\"/>\n            </a>\n        )\n    }\n}\n\nexport default AppLogoWithLink\n","import React from 'react'\n\nfunction ArtistProfileHeader({artistName, artistPicture, releasedMusic}) {\n    return (\n        <div className=\"artistProfileHeader\">\n            <img src={artistPicture} alt=\"artist profile\" />\n            <div className=\"artistNameAndReleasedMusic\">\n                <h1>{artistName}</h1>\n                <h4>{releasedMusic}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default ArtistProfileHeader\n\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport spotifyLogo from '../logos/spotifyLogo.png'\nimport appleMusicLogo from '../logos/appleMusicLogo.png'\nimport youtubeLogo from '../logos/youtubeLogo.png'\nimport instagramLogo from '../logos/instagramLogo.png'\n\nimport Track from '../components/Track'\nimport AppLogoWithLink from '../components/AppLogoWithLink'\nimport ArtistProfileHeader from '../components/ArtistProfileHeader'\n\n\nfunction ArtistProfile() {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    //artist info\n    const [artistName, setArtistName] = useState(\"\")\n    const [artistDatabaseId, setArtistDatabaseId] = useState(\"\")\n    const [artistPicture, setArtistPicture] = useState(\"\")\n    const [releasedMusic, setReleasedMusic] = useState(\"\")\n    const [links, setLinks] = useState([])\n    const [topTracks, setTopTracks] = useState([])\n    \n\n    //music related functions\n    const countTracks = (albums) => {\n        let trackCount = 0\n        let singlesCount = 0\n        let albumCount = 0\n\n        for (let album of albums){\n            if (album.album_type === \"single\"){\n                trackCount++\n                singlesCount++\n            } else if (album.album_type === \"album\"){\n                trackCount += album.total_tracks\n                albumCount++\n            }\n        }\n\n\n        return `tracks : ${trackCount}, singles : ${singlesCount}, albums : ${albumCount}`\n    }\n\n    const createFeaturesString = (artists) => {\n        let featuresString = \"feat: \"\n        for (let artist of artists){\n            if (artistName !== artist.name){\n                featuresString += `${artist.name}, `\n            } \n        }\n        return featuresString.slice(0, -2)\n    }\n\n\n    //fetch data function\n    const getArtistsIds =  async () => {\n        const artistIds = localStorage.getItem('artistIds')\n        return artistIds.split(':')\n    }\n\n    const getSpotifyData = async (spotifyId) => {\n        const requestBody = {spotifyId}\n\n        const response = await axios.post(`${API_URL}/spotify/loadArtistProfile`, requestBody)\n        const data = await response\n\n        return data\n    }\n\n    const getDataBaseData = async (dataBaseId) => {\n        const requestBody = {dataBaseId}\n\n        const response = await axios.post(`${API_URL}/dataBase/artistProfile`, requestBody)\n        const data = await response\n\n        return data\n    }\n    \n\n    //traffic functions\n    const addTrapMapProfileVisit = (dataBaseId) => {\n        let requestBody = {dataBaseId}\n        axios.post(`${API_URL}/traffic/addTrapMapProfileVisit`, requestBody)\n    }\n\n    \n\n    useEffect( () => {\n        \n        getArtistsIds()\n            .then(ids => {\n                getSpotifyData(ids[0])\n                    .then(spotifyData => { \n                        console.log(spotifyData)\n                        //header\n                        setArtistName(spotifyData.data[0].name)\n                        setArtistPicture(spotifyData.data[0].images[0].url)\n                        setReleasedMusic(countTracks(spotifyData.data[2]))\n\n                        //tracks\n                        setTopTracks(spotifyData.data[1])\n                })\n\n                getDataBaseData(ids[1])\n                    .then(dataBaseData => {\n                        setArtistDatabaseId(dataBaseData.data._id)\n                        //header\n                        setLinks([\n                            [\"spotify\",  dataBaseData.data.spotifyLink],\n                            [\"appleMusic\",  dataBaseData.data.appleMusicLink],\n                            [\"youtube\" , dataBaseData.data.youtubeLink],\n                            [\"instagram\" , dataBaseData.data.instagramLink]\n                        ])\n\n                        //add trapMap visits\n                        addTrapMapProfileVisit(dataBaseData.data._id)\n                    })\n\n            })        \n    }, [])\n\n    return (\n        <div className=\"artistProfile\">\n            <ArtistProfileHeader artistName={artistName} artistPicture={artistPicture} releasedMusic={releasedMusic} />\n\n            <div className=\"links\">\n                {links.map(link => {\n                    return (\n                        <AppLogoWithLink app={link[0]} link={link[1]} artistDatabaseId={artistDatabaseId} />\n                    )\n                })}\n            </div>\n\n            <div className=\"tracks\">\n                {topTracks.map(track => {\n                    return (\n                        <Track track={track} artistName={artistName} artistDatabaseId={artistDatabaseId}/>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default ArtistProfile\n\n\n","import React from 'react'\nimport { useEffect, useRef } from 'react'\nimport axios from 'axios'\n\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\n\n\nfunction Map() {\n\n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n    const CLIENT_URL = 'https://trapmapversion2.herokuapp.com'\n    \n    //for development\n    // const CLIENT_URL = 'http://localhost:3000'\n    // const API_URL = 'http://localhost:5005'\n    \n    \n    //map props\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const berlinCenter = [13.404954, 52.520008]\n    const berlinBounds = [\n        [12.75, 52.25],\n        [14, 52.75]\n    ]\n\n    mapboxgl.accessToken = \"pk.eyJ1Ijoiam9vc3R3bWQiLCJhIjoiY2t1NDQ3NmJqMXRwbzJwcGM5a3FuY3B3dCJ9.yyon_mO5Y9sI1WgD-XFDRQ\"\n\n\n    //change the db artist data into mapboxgl format\n    const features = []\n    const artistToFeatures = (artists) => {\n        for (let artist of artists){\n            const feature = {\n                'type' : 'feature',\n\n                'properties' : {\n                    'artistName' : artist.name,\n                    'artistPicture' : artist.picture, \n                    'artistDatabaseId' : artist._id,\n                    'artistSpotifyId' : artist.spotifyID\n                },\n\n                'geometry' : {\n                    'type' : 'Point',\n                    'coordinates' : artist.coordinates\n                }\n            }\n        \n            features.push(feature)\n        }\n    }\n\n\n    //create function that enables the marker onClick function\n    //to send ids to the following page\n\n    const sendArtistIds = (artistDatabaseId, artistSpotifyId) => {\n\n        if (typeof(Storage) !== \"undefined\") {\n            localStorage.setItem('artistIds', `${artistSpotifyId}:${artistDatabaseId}`);\n        } else {\n            // Sorry! No Web Storage support..\n        }\n    }   \n\n    //build redirect url\n    const redirectToArtistProfilePage = (artistName) => {\n        window.location.href = `${CLIENT_URL}/map/${artistName}`\n        \n    }\n\n    useEffect(() => {\n\n        //get all artist data form db\n        axios.get(`${API_URL}/dataBase/map`)\n            .then(res => {\n                //chnage data into mapboxgl format with function\n                artistToFeatures(res.data)\n            })\n\n        \n        //create the map object\n        if (map.current) return; // initialize map only once\n            map.current = new mapboxgl.Map({        \n            container: mapContainer.current,\n            style: 'mapbox://styles/joostwmd/ckufanbzo4qlm18qj3w744lbx',\n            center: berlinCenter,\n            zoom: 8.5,\n            minZoom : 8.5,\n            maxBounds : berlinBounds\n        })\n\n        //load artist data in mapbox format onto the map object\n        map.current.on('load', () => {\n            map.current.addSource('artists', {\n                'type' : 'geojson', \n                'data' : {\n                    'type' : 'FeatureCollection', \n                    'features' : features\n                }\n            })\n\n\n        //create a marker(img) for each artists (feature) object\n        for (let i = 0; i < features.length; i++){\n            //create divs\n            const el = document.createElement('div')\n            //const el = document.createElement('img')\n            el.className = 'marker'\n\n            //add the divs to mapboxgl marker \n            new mapboxgl.Marker(el).setLngLat(features[i].geometry.coordinates).addTo(map.current)\n                    \n            //create array for all markers\n            const markers = document.getElementsByClassName('marker')\n                \n                //add functionality and design (src for marker img and scaleControl)  \n                for (let i = 0; i < markers.length; i++){\n                    markers[i].addEventListener('click', () => {\n                        sendArtistIds(features[i].properties.artistDatabaseId, features[i].properties.artistSpotifyId)\n                        redirectToArtistProfilePage(features[i].properties.artistName)\n                    })\n                    \n                    //add url to background img\n                    markers[i].style.backgroundImage = `url(${features[i].properties.artistPicture})`\n\n                    //add image src\n                    //markers[i].setAttribute('src', `${features[i].properties.artistPicture}`)\n                    \n\n                    //resize markers in zoom\n                    map.current.on('zoom', () => {\n                        const initialZoom = 9.255562090280671 //even if zoom is set to 8.5???\n                        let size = (Number((map.current.getZoom()) - initialZoom) * 15) + 30\n                        markers[i].style.height = `${size}px`\n                        markers[i].style.width = `${size}px`\n                    })\n                }\n            }\n        })\n}, [])\n\n    \n\n\n\n    return (\n        <div>\n          <div ref={mapContainer} className=\"map-container\" />\n        </div>\n    )\n}\n\nexport default Map\n","import { Link } from 'react-router-dom'\n\nfunction Nav() {\n    return (\n        <div id=\"nav\">\n            <Link to=\"/\">\n                <button>home</button>\n            </Link>\n\n            <Link to=\"/map\">\n                <button>map</button>\n            </Link>\n        </div>\n    )\n}\n\nexport default Nav","import './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n\n//pages\nimport Home from './pages/Home';\nimport ArtistProfile from './pages/ArtistProfile';\nimport Map from './pages/Map';\n\n\n//components\nimport Nav from './components/Nav'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Nav />\n        <Routes>\n\n          <Route\n            exact path=\"/\"\n            element={<Home />}\n          />\n\n          <Route \n            exact path=\"/map\"\n            element={<Map />}\n          />\n\n          <Route \n            exact path=\"/map/:artistName\"\n            element={<ArtistProfile />}\n          />\n\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}