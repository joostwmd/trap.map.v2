{"version":3,"sources":["pages/Home.js","components/Track.js","components/ArtistProfileHeader.js","pages/ArtistProfile.js","pages/Map.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Home","Track","track","artistName","artistsOnTrack","artists","useState","theArtists","setTheArtists","useEffect","artistString","artist","name","getArtistsOnTrack","src","album","images","url","controls","preview_url","slice","ArtistProfileHeader","artistPicture","releasedMusic","links","href","spotify","youtube","instagram","ArtistProfile","API_URL","setArtistName","setArtistPicture","setReleasedMusic","setLinks","topTracks","setTopTracks","getArtistsIds","a","data","localStorage","getItem","split","getSpotifyData","spotifyId","requestBody","axios","post","response","console","log","getDataBaseData","dataBaseId","then","ids","spotifyData","albums","trackCount","singlesCount","albumCount","album_type","total_tracks","countTracks","dataBaseData","spotifyLink","youtubeLink","instagramLink","id","map","Map","mapContainer","useRef","lng","setLng","lat","setLat","zoom","setZoom","mapboxgl","accessToken","features","sendArtistIds","artistDatabaseId","artistSpotifyId","idsString","JSON","stringify","Storage","setItem","get","res","feature","picture","_id","spotifyID","coordinates","push","artistToFeatures","current","container","style","center","on","getCenter","toFixed","getZoom","addSource","i","length","el","document","createElement","className","Marker","setLngLat","geometry","addTo","markers","getElementsByClassName","addEventListener","properties","window","location","backgroundImage","ref","Nav","to","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7bfa93c4.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Home() {\n    return (\n        <div>\n            <h1>welcome to trap map</h1>\n        </div>\n    )\n}\n\nexport default Home","import React, { useState, useEffect } from 'react'\n\n\nfunction Track({track, artistName}) {\n\n\n   \n\n    const artistsOnTrack = track.artists\n    const [theArtists, setTheArtists] = useState([])\n    \n    const getArtistsOnTrack = () => {\n        \n        let artistString = \"feat: \"\n        for (let artist of artistsOnTrack){\n\n            if (artistName !== artist.name){\n                artistString += `${artist.name}, `\n            }\n             \n        }\n        setTheArtists(artistString)\n    }\n\n    \n\n    useEffect(() => {\n        getArtistsOnTrack()\n    }, [])\n\n   \n    //no feat \n    if(theArtists === \"feat: \"){\n       return (\n        <div>\n            <img src={track.album.images[1].url} />\n            <h4>{track.name}</h4>\n        \n            <audio controls>\n                <source src={track.preview_url} />\n            </audio>\n        </div>\n    )\n    }\n\n    if(theArtists !== \"feat: \"){\n        return (\n        <div>\n            <img src={track.album.images[1].url} />\n            <h4>{track.name}</h4>\n            <h5>{theArtists.slice(0, -2)}</h5>\n\n            <audio controls>\n                <source src={track.preview_url} />\n            </audio>\n        </div>\n        )\n    }\n   \n}\n\nexport default Track\n","function ArtistProfileHeader({artistName, artistPicture, releasedMusic, links}) {\n    return (\n        <div>\n            <h1>{artistName}</h1>\n            <img src={artistPicture} />\n            <h4>{releasedMusic}</h4>\n\n            <a href={links.spotify}>spotify</a>\n            <a href={links.youtube}>youtube</a>\n            <a href={links.instagram}>insta</a>\n        </div>\n    )\n}\n\nexport default ArtistProfileHeader","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport Track from '../components/Track';\nimport ArtistProfileHeader from '../components/ArtistProfileHeader';\n\nfunction ArtistProfile() {\n\n\n    //const API_URL = process.env.API_URL;\n    //const API_URL = 'http://localhost:5005'\n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    //header\n    const [artistName, setArtistName] = useState(\"\")\n    const [artistPicture, setArtistPicture] = useState(\"\")\n    const [releasedMusic, setReleasedMusic] = useState(\"\")\n    const [links, setLinks] = useState({})\n\n\n\n    //tracks\n    const [topTracks, setTopTracks] = useState([])\n   \n    //render\n    \n    \n\n\n    const countTracks = (albums) => {\n        let trackCount = 0\n        let singlesCount = 0\n        let albumCount = 0\n\n        for (let album of albums){\n            if (album.album_type === \"single\"){\n                trackCount++\n                singlesCount++\n            } else if (album.album_type === \"album\"){\n                trackCount += album.total_tracks\n                albumCount++\n            }\n        }\n\n\n        return `tracks : ${trackCount}, singles : ${singlesCount}, albums : ${albumCount}`\n    }\n\n    const getArtistsIds = async () => {\n        const data = localStorage.getItem('data')\n        //console.log('test', data.split(\",\")[0].split(\":\")[1], data.split(\",\")[1].split(\":\")[1].slice(0, -1))\n        return [data.split(\",\")[0].split(\":\")[1], data.split(\",\")[1].split(\":\")[1].slice(0, -1)]\n    }\n\n    const getSpotifyData = async (spotifyId) => {\n        const requestBody = {spotifyId}\n\n        const response = await axios.post(`${API_URL}/spotify/loadArtistProfile`, requestBody)\n        const data = await response\n\n        console.log(\"spotify data\", data)\n        return data\n    }\n\n    const getDataBaseData = async (dataBaseId) => {\n        const requestBody = {dataBaseId}\n\n        const response = await axios.post(`${API_URL}/dataBase/artistProfile`, requestBody)\n        const data = await response\n\n        console.log(\"db data\", data)\n        return data\n    }\n    \n\n    useEffect( () => {\n        getArtistsIds()\n            .then(ids => {\n                getSpotifyData(ids[0])\n                    .then(spotifyData => {\n                        console.log(spotifyData)\n\n                        //header\n                        setArtistName(spotifyData.data[0].name)\n                        setArtistPicture(spotifyData.data[0].images[0].url)\n                        setReleasedMusic(countTracks(spotifyData.data[2]))\n\n                        //tracks\n                        setTopTracks(spotifyData.data[1])\n                })\n\n                getDataBaseData(ids[1])\n                    .then(dataBaseData => {\n                        console.log(dataBaseData)\n                        //header\n                        setLinks({\n                            \"spotify\" : dataBaseData.data.spotifyLink,\n                            \"youtube\" : dataBaseData.data.youtubeLink,\n                            \"instagram\" : dataBaseData.data.instagramLink\n                        })\n                    })\n\n            })        \n    }, [])\n\n\n    \n    return (\n        <div id=\"profileWrapper\">\n            \n            <ArtistProfileHeader artistName={artistName} artistPicture={artistPicture} releasedMusic={releasedMusic} links={links} />\n\n            {topTracks.map(track => {\n                if (track.preview_url !== null){\n                    return (\n                        <div>\n                            <Track track={track} artistName={artistName}/>\n                        </div>\n                )\n                }\n            })}\n        </div>\n    )\n}\n\nexport default ArtistProfile","import React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\n\n\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\n\n\nfunction Map() {\n\n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n    const CLIENT_URL = 'https://trapmapversion2.herokuapp.com'\n    \n    //map props\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const [lng, setLng] = useState(13.404954);\n    const [lat, setLat] = useState(52.520008);\n    const [zoom, setZoom] = useState(9);\n    mapboxgl.accessToken = \"pk.eyJ1Ijoiam9vc3R3bWQiLCJhIjoiY2t1NDQ3NmJqMXRwbzJwcGM5a3FuY3B3dCJ9.yyon_mO5Y9sI1WgD-XFDRQ\"\n\n\n    //change the db artist data into mapboxgl format\n    const features = []\n    const artistToFeatures = (artists) => {\n        for (let artist of artists){\n            const feature = {\n                'type' : 'feature',\n\n                'properties' : {\n                    'artistName' : artist.name,\n                    'artistPicture' : artist.picture, \n                    'artistDatabaseId' : artist._id,\n                    'artistSpotifyId' : artist.spotifyID\n                },\n\n                'geometry' : {\n                    'type' : 'Point',\n                    'coordinates' : artist.coordinates\n                }\n            }\n        \n            features.push(feature)\n        }\n    }\n\n\n    //create function that enables the marker onClick function\n    //to send ids to the following page\n\n    const sendArtistIds = (artistDatabaseId, artistSpotifyId) => {\n\n        let ids = {\n            'spotify' : artistSpotifyId,\n            'dataBase' : artistDatabaseId\n        }\n\n        let idsString = JSON.stringify(ids)\n\n        if (typeof(Storage) !== \"undefined\") {\n            localStorage.setItem('data', idsString);\n        } else {\n            // Sorry! No Web Storage support..\n        }\n    }   \n\n    //build redirect url\n    const redirectToArtistProfilePage = (artistName) => {\n        window.location.href = `${CLIENT_URL}/map/${artistName}`\n        \n    }\n\n    useEffect(() => {\n\n        //get all artist data form db\n        axios.get(`${API_URL}/dataBase/map`)\n            .then(res => {\n                //chnage data into mapboxgl format with function\n                artistToFeatures(res.data)\n            })\n\n        \n        //create the map object\n        if (map.current) return; // initialize map only once\n            map.current = new mapboxgl.Map({        \n            container: mapContainer.current,\n            style: 'mapbox://styles/joostwmd/ckvwifepf21kj15pflu8gbkdd',\n            center: [lng, lat],\n            zoom: zoom,\n            //ADJUST\n            // maxBounds : [[13.192625881080286, 52.38949809002746], [13.659758765765956, 52.64256574061617]]\n        })\n\n        //update viewport when interactiong with map\n        if (!map.current) return; // wait for map to initialize\n        map.current.on('move', () => {\n            setLng(map.current.getCenter().lng.toFixed(4));\n            setLat(map.current.getCenter().lat.toFixed(4));\n            setZoom(map.current.getZoom().toFixed(2))\n        });\n\n        //load artist data in mapbox format onto the map object\n        map.current.on('load', () => {\n            map.current.addSource('artists', {\n                'type' : 'geojson', \n                'data' : {\n                    'type' : 'FeatureCollection', \n                    'features' : features\n                }\n            })\n\n        //create a marker for each artists (feature) object\n        for (let i = 0; i < features.length; i++){\n            //create divs\n            const el = document.createElement('div')\n            el.className = 'marker'\n\n            //add the divs to mapboxgl marker \n            new mapboxgl.Marker(el).setLngLat(features[i].geometry.coordinates).addTo(map.current)\n                    \n            //create array for all markers\n            const markers = document.getElementsByClassName('marker')\n                \n                //add functionality and design  \n                for (let i = 0; i < markers.length; i++){\n                    markers[i].addEventListener('click', () => {\n                        sendArtistIds(features[i].properties.artistDatabaseId, features[i].properties.artistSpotifyId)\n                        redirectToArtistProfilePage(features[i].properties.artistName)\n                    })\n                    markers[i].style.backgroundImage = `url(${features[i].properties.artistPicture})`\n                }\n            }\n        })\n}, [])\n\n    \n\n\n\n    return (\n        <div>\n          <div ref={mapContainer} className=\"map-container\" />\n        </div>\n    )\n}\n\nexport default Map\n","import { Link } from 'react-router-dom'\n\nfunction Nav() {\n    return (\n        <div>\n            <Link to=\"/\">\n                <button>home</button>\n            </Link>\n\n            <Link to=\"/map\">\n                <button>map</button>\n            </Link>\n        </div>\n    )\n}\n\nexport default Nav","import './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n\n//pages\nimport Home from './pages/Home';\nimport ArtistProfile from './pages/ArtistProfile';\nimport Map from './pages/Map';\n\n\n//components\nimport Nav from './components/Nav'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Nav />\n        <Routes>\n\n          <Route\n            exact path=\"/\"\n            element={<Home />}\n          />\n\n          <Route \n            exact path=\"/map\"\n            element={<Map />}\n          />\n\n          <Route \n            exact path=\"/map/:artistName\"\n            element={<ArtistProfile />}\n          />\n\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}