{"version":3,"sources":["pages/Home.js","components/Track.js","logos/spotifyLogo.png","logos/appleMusicLogo.png","logos/youtubeLogo.png","logos/instagramLogo.png","components/AppLogoWithLink.js","components/ArtistProfileHeader.js","pages/ArtistProfile.js","pages/Map.js","App.js","reportWebVitals.js","components/Fonts.js","style/theme.js","index.js"],"names":["Home","URL","paperPlaneIcon","useState","email","setEmail","singUpForBetaKey","requestBody","axios","post","document","getElementsByClassName","innerHTML","classList","toggle","getElementById","disabled","placeholder","useEffect","onClick","window","location","href","id","value","onChange","e","target","type","className","Track","artistName","artistDatabaseId","track","pauseTrack","trackName","pause","trackTitle","style","color","fontSize","playOrPauseTrack","audios","paused","audio","split","play","playTrack","name","album","images","url","artists","length","featuresString","artist","slice","createFeaturesInfo","onPlay","addSnippetPlayed","src","preview_url","AppLogoWithLink","app","link","API_URL","addSpotifyProfileVisit","spotifyLogo","alt","addAppleMusicProfileVisit","appleMusicLogo","addYoutubeProfileVisit","youtubeLogo","addInstagramProfileVisit","instagramLogo","ArtistProfileHeader","artistPicture","releasedMusic","ArtistProfile","setArtistName","setArtistDatabaseId","setArtistPicture","setReleasedMusic","links","setLinks","topTracks","setTopTracks","getArtistsIds","a","pathname","getSpotifyData","spotifyId","response","data","getDataBaseData","dataBaseId","then","ids","dataBaseData","_id","spotifyLink","appleMusicLink","youtubeLink","instagramLink","addTrapMapProfileVisit","spotifyData","albums","trackCount","singlesCount","albumCount","album_type","total_tracks","countTracks","map","Map","mapContainer","useRef","berlinCenter","berlinBounds","mapboxgl","accessToken","features","get","res","feature","picture","spotifyID","coordinates","push","artistToFeatures","current","container","center","zoom","minZoom","maxBounds","on","addSource","i","marker","createElement","Marker","setLngLat","geometry","addTo","markers","addEventListener","artistSpotifyId","properties","backgroundImage","initialZoom","markerSize","Number","getZoom","height","width","nameSize","ref","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Fonts","styles","theme","extendTheme","fonts","heading","body","config","initialColorMode","useSystemColorMode","ReactDOM","render"],"mappings":"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","file":"static/js/main.8da69cbc.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction Home() {\n    \n    //for development\n    //const URL = 'http://localhost:3000'\n    \n    const URL = 'https://trapmapversion2.herokuapp.com'\n\n    //svg for animation\n    const checkIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\" height=\\\"24\\\"><path fill=\\\"none\\\" d=\\\"M0 0h24v24H0z\\\"/><path d=\\\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\\\"/></svg>\"\n    const paperPlaneIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\" height=\\\"24\\\"><path fill=\\\"none\\\" d=\\\"M0 0h24v24H0z\\\"></path><path d=\\\"M1.946 9.315c-.522-.174-.527-.455.01-.634l19.087-6.362c.529-.176.832.12.684.638l-5.454 19.086c-.15.529-.455.547-.679.045L12 14l6-8-8 6-8.054-2.685z\\\" fill=\\\"rgba(255,255,255,1)\\\"></path></svg>\"\n\n\n\n    const redirectToMap = () => {\n        window.location.href = `${URL}/map/`\n        \n    }\n\n    const signUpAnimation = () => {    \n        if (document.getElementsByClassName('signUpButtonIconContainer')[0].innerHTML === paperPlaneIcon){\n            document.getElementsByClassName('signUpButtonIconContainer')[0].innerHTML = checkIcon;\n            document.getElementsByClassName('signUpButton')[0].classList.toggle('signUpButton__circle');\n            document.getElementById('emailInput').disabled = true\n            document.getElementById('emailInput').placeholder = 'thank you'\n        }\n    }\n\n    const [email, setEmail] = useState(\"\")\n    const singUpForBetaKey = () => {\n        //add email to db\n        const requestBody = {email}\n        axios.post(`${URL}/traffic/addSignUpForBetaKey`, requestBody)\n\n        //button animation\n        signUpAnimation()\n    }\n\n    useEffect(() => {\n        document.getElementsByClassName('signUpButtonIconContainer')[0].innerHTML = paperPlaneIcon\n    })\n\n    \n    return (\n        <div>\n            <h1>welcome to trap map</h1>\n\n            <p>new plattfrom to discover music: no algorithms, no playlists, just you and the music</p>\n            <button onClick={() => {redirectToMap()}}>check out the demo version</button>\n            \n            <h2>sign-up for the beta-key of the official trap map app</h2>\n           <div id=\"signUpWithEmailContainer\">\n                <input \n                    id=\"emailInput\"\n                    value={email}\n                    onChange={e => setEmail(e.target.value)}\n                    placeholder=\"your email adress\"\n                    type=\"email\"\n                />\n            \n\n                <div className=\"signUpButton\" onClick={() => singUpForBetaKey()}>\n                    <div className=\"signUpButtonContainer\">\n                        <div className=\"signUpButtonIconContainer\">{paperPlaneIcon}</div>\n                    </div>\n                </div>\n            </div>\n\n            <h2>do you want to get on the map? DM us on insta</h2><a href=\"https://www.instagram.com/mapmusic.berlin/\">insta</a>\n\n        </div>\n    )\n}\n\nexport default Home","import axios from 'axios'\n\n//icons\n\nfunction Track({artistName, artistDatabaseId, track}) {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n\n    //create strings for additional trackrelated info \n    const createFeaturesInfo = (artists) => {\n        if (artists.length === 1){\n            return ''\n        }\n        let featuresString = \"feat: \"\n        for (let artist of artists){\n            if (artistName !== artist.name){\n                featuresString += `${artist.name}, `\n            } \n        }\n        return featuresString.slice(0, -2)\n    }\n\n    const createReleaseInfo = (album) => {\n        if (album.album_type === \"single\"){\n            return `single`\n        }\n\n        if (album.album_type === \"album\"){\n            return `on album: ${album.name}`\n        }\n    }\n\n\n    //functions to handle track behavior\n    const playTrack = (trackName) => {\n        const track = document.getElementById(`audioPlayer:${trackName}`)\n        track.play()\n         \n        //add visual feedback\n        const trackTitle = document.getElementById(`trackTitle:${trackName}`)\n        trackTitle.style.color = 'blue'\n        trackTitle.style.fontSize = '40px'\n        // //add style attributes to spin\n        // const vinylRecord = document.getElementById(`vinylRecordCurve:${trackName}`)\n        // vinylRecord.style.animationName = 'spinningVinylRecord'\n        // vinylRecord.style.animationDuration = `${track.duration / 5}s`\n        // vinylRecord.style.animationIterationCount = \"5\"\n        // vinylRecord.style.animationTimingFunction = 'linear'\n        // vinylRecord.style.animationPlayState = 'running'\n    }\n\n    const pauseTrack = (trackName) => {\n        const track = document.getElementById(`audioPlayer:${trackName}`) \n        track.pause()\n\n        //remove visual feedback\n        const trackTitle = document.getElementById(`trackTitle:${trackName}`)\n        trackTitle.style.color = 'black'\n        trackTitle.style.fontSize = '25px'\n\n        // //add style attribute to pause spinning animation\n        // const vinylRecord = document.getElementById(`vinylRecordCurve:${trackName}`)\n        // vinylRecord.style.animationPlayState = 'paused'\n    }\n\n    //handle click on play/pause button => All the track functions are used here\n    const playOrPauseTrack = (trackName) => {\n        const audios = document.getElementsByClassName('audioPlayer')\n        const clickedAudio = document.getElementById(`audioPlayer:${trackName}`)\n             \n        if (clickedAudio.paused){\n            //pause all other tracks\n            for (let audio of audios){\n                pauseTrack(audio.id.split(\":\")[1])\n            }\n            //play clicked track\n            playTrack(trackName)\n                \n        } else {\n            //pause the track \n            pauseTrack(trackName)\n        }\n    }\n\n    \n    //traffic\n    const addSnippetPlayed = (artistDatabaseId) => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addSnippetPlayed`, requestBody)\n    }\n\n\n    return (\n        <div className=\"track\" onClick={() => {playOrPauseTrack(track.name)}}>\n            <div id={`trackCover:${track.name}`} className='trackCover' style={{'backgroundImage' : `url(${track.album.images[1].url})`}}/>\n\n            <div className=\"trackTitleAndAlbum\">\n                <div id={`trackTitle:${track.name}`} className=\"trackTitle\">{`${track.name} ${createFeaturesInfo(track.artists)}`}</div>\n                {/* <p>{createReleaseInfo(track.album)}</p> */}\n            </div>\n\n            <audio id={`audioPlayer:${track.name}`} className='audioPlayer' onPlay={() => {addSnippetPlayed(artistDatabaseId)}}>\n                <source src={track.preview_url} type=\"audio/mp3\" />\n            </audio>\n        </div>\n    )\n}\n\nexport default Track\n","export default __webpack_public_path__ + \"static/media/spotifyLogo.8eef091b.png\";","export default __webpack_public_path__ + \"static/media/appleMusicLogo.2228dbd7.png\";","export default __webpack_public_path__ + \"static/media/youtubeLogo.6b5588fd.png\";","export default __webpack_public_path__ + \"static/media/instagramLogo.f3459bc3.png\";","import axios from 'axios'\n\nimport spotifyLogo from '../logos/spotifyLogo.png'\nimport appleMusicLogo from '../logos/appleMusicLogo.png'\nimport youtubeLogo from '../logos/youtubeLogo.png'\nimport instagramLogo from '../logos/instagramLogo.png'\n\nfunction AppLogoWithLink({app, link, artistDatabaseId}) {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    const addSpotifyProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addSpotifyProfileVisit`, requestBody)\n    }\n\n    const addAppleMusicProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addAppleMusicProfileVisit`, requestBody)\n    }\n\n    const addYoutubeProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addYoutubeProfileVisit`, requestBody)\n    }\n\n    const addInstagramProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addInstagramProfileVisit`, requestBody)\n    }\n\n\n    \n    if (app === \"spotify\"){\n        return (\n            <a href={link} onClick={() => {addSpotifyProfileVisit()}}>\n                <img className=\"appLogo\" src={spotifyLogo} alt=\"spotify logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"appleMusic\"){\n        return (\n            <a href={link} onClick={() => {addAppleMusicProfileVisit()}}>\n                <img className=\"appLogo\" src={appleMusicLogo} alt=\"apple music logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"youtube\"){\n        return (\n            <a href={link} onClick={() => {addYoutubeProfileVisit()}}>\n                <img className=\"appLogo\" src={youtubeLogo} alt=\"youtube logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"instagram\"){\n        return (\n            <a href={link} onClick={() => {addInstagramProfileVisit()}}>\n                <img  className=\"appLogo\" src={instagramLogo} alt=\"instagram logo\"/>\n            </a>\n        )\n    }\n}\n\nexport default AppLogoWithLink\n","import React from 'react'\n\nfunction ArtistProfileHeader({artistName, artistPicture, releasedMusic}) {\n    return (\n        <div className=\"artistProfileHeader\">\n            <img src={artistPicture} alt=\"artist profile\" />\n            <div className=\"artistNameAndReleasedMusic\">\n                <h1>{artistName}</h1>\n                {/* <h4>{releasedMusic}</h4> */}\n            </div>\n        </div>\n    )\n}\n\nexport default ArtistProfileHeader\n\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport Track from '../components/Track'\nimport AppLogoWithLink from '../components/AppLogoWithLink'\nimport ArtistProfileHeader from '../components/ArtistProfileHeader'\n\n\nfunction ArtistProfile() {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    //artist info\n    const [artistName, setArtistName] = useState(\"\")\n    const [artistDatabaseId, setArtistDatabaseId] = useState(\"\")\n    const [artistPicture, setArtistPicture] = useState(\"\")\n    const [releasedMusic, setReleasedMusic] = useState(\"\")\n    const [links, setLinks] = useState([])\n    const [topTracks, setTopTracks] = useState([])\n    \n\n    //music related functions\n    const countTracks = (albums) => {\n        let trackCount = 0\n        let singlesCount = 0\n        let albumCount = 0\n\n        for (let album of albums){\n            if (album.album_type === \"single\"){\n                trackCount++\n                singlesCount++\n            } else if (album.album_type === \"album\"){\n                trackCount += album.total_tracks\n                albumCount++\n            }\n        }\n\n\n        return `tracks : ${trackCount}, singles : ${singlesCount}, albums : ${albumCount}`\n    }\n\n    const createFeaturesString = (artists) => {\n        let featuresString = \"feat: \"\n        for (let artist of artists){\n            if (artistName !== artist.name){\n                featuresString += `${artist.name}, `\n            } \n        }\n        return featuresString.slice(0, -2)\n    }\n\n\n    //fetch data function\n    const getArtistsIds = async () => {\n        return [window.location.pathname.split(\":\")[1], window.location.pathname.split(\":\")[2]]\n    }\n\n    const getSpotifyData = async (spotifyId) => {\n        const requestBody = {spotifyId}\n\n        const response = await axios.post(`${API_URL}/spotify/loadArtistProfile`, requestBody)\n        const data = await response\n\n        return data\n    }\n\n    const getDataBaseData = async (dataBaseId) => {\n        const requestBody = {dataBaseId}\n\n        const response = await axios.post(`${API_URL}/dataBase/artistProfile`, requestBody)\n        const data = await response\n\n        return data\n    }\n    \n\n    //traffic functions\n    const addTrapMapProfileVisit = (dataBaseId) => {\n        let requestBody = {dataBaseId}\n        axios.post(`${API_URL}/traffic/addTrapMapProfileVisit`, requestBody)\n    }\n\n    \n\n    useEffect( () => {\n        \n        getArtistsIds()\n            .then(ids => {\n                getDataBaseData(ids[0])\n                .then(dataBaseData => {\n                    setArtistDatabaseId(dataBaseData.data._id)\n                    //header\n                    setLinks([\n                        [\"spotify\",  dataBaseData.data.spotifyLink],\n                        [\"appleMusic\",  dataBaseData.data.appleMusicLink],\n                        [\"youtube\" , dataBaseData.data.youtubeLink],\n                        [\"instagram\" , dataBaseData.data.instagramLink]\n                    ])\n\n                    //add trapMap visits\n                    addTrapMapProfileVisit(dataBaseData.data._id)\n                })\n\n                getSpotifyData(ids[1])\n                    .then(spotifyData => { \n                        //header\n                        setArtistName(spotifyData.data[0].name)\n                        setArtistPicture(spotifyData.data[0].images[0].url)\n                        setReleasedMusic(countTracks(spotifyData.data[2]))\n\n                        //tracks\n                        setTopTracks(spotifyData.data[1])\n                })\n            })        \n    }, [])\n\n    return (\n        <div className=\"artistProfile\">\n            <ArtistProfileHeader artistName={artistName} artistPicture={artistPicture} releasedMusic={releasedMusic} />\n\n            <div className=\"links\">\n                {links.map(link => {\n                    return (\n                        <AppLogoWithLink app={link[0]} link={link[1]} artistDatabaseId={artistDatabaseId} />\n                    )\n                })}\n            </div>\n\n            <div className=\"tracks\">\n                {topTracks.map(track => {\n                    //makes sure that every track is playable\n                    if (track.preview_url !== null){\n                        return (\n                            <Track track={track} artistName={artistName} artistDatabaseId={artistDatabaseId}/>\n                    )\n                    }\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default ArtistProfile\n\n\n","import React from 'react'\nimport { useEffect, useRef } from 'react'\nimport axios from 'axios'\n\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction Map() {\n\n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n    const CLIENT_URL = 'https://trapmapversion2.herokuapp.com'\n    \n    //for development\n    // const CLIENT_URL = 'http://localhost:3000'\n    // const API_URL = 'http://localhost:5005'\n    \n    \n    //map props\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const berlinCenter = [13.404954, 52.520008]\n    const berlinBounds = [\n        [12.75, 52.25],\n        [14, 52.75]\n    ]\n\n    mapboxgl.accessToken = \"pk.eyJ1Ijoiam9vc3R3bWQiLCJhIjoiY2t1NDQ3NmJqMXRwbzJwcGM5a3FuY3B3dCJ9.yyon_mO5Y9sI1WgD-XFDRQ\"\n\n\n    //change the db artist data into mapboxgl format\n    const features = []\n    const artistToFeatures = (artists) => {\n        for (let artist of artists){\n            const feature = {\n                'type' : 'feature',\n\n                'properties' : {\n                    'artistName' : artist.name,\n                    'artistPicture' : artist.picture, \n                    'artistDatabaseId' : artist._id,\n                    'artistSpotifyId' : artist.spotifyID\n                },\n\n                'geometry' : {\n                    'type' : 'Point',\n                    'coordinates' : artist.coordinates\n                }\n            }        \n            features.push(feature)\n        }\n    }\n\n    //build redirect url\n    const redirectToArtistProfilePage = (artistName, artistDatabaseId, artistSpotifyId) => {\n        window.location.href = `${CLIENT_URL}/map/${artistName}:${artistDatabaseId}:${artistSpotifyId}`\n        \n    }\n\n    useEffect(() => {\n\n       \n        //get all artist data form db\n        axios.get(`${API_URL}/dataBase/map`)\n        .then(res => {\n            //change data into mapboxgl format with function\n            artistToFeatures(res.data)\n        })\n\n    \n        //create the map object\n        if (map.current) return; // initialize map only once\n            map.current = new mapboxgl.Map({        \n            container: mapContainer.current,\n            style: 'mapbox://styles/joostwmd/ckucoygnc51gn18s0xu6mjltv', \n            center: berlinCenter,\n            zoom: 8.5,\n            minZoom : 8.5,\n            maxBounds : berlinBounds\n        })\n\n        //load artist data in mapbox format onto the map object\n        map.current.on('load', () => {\n            map.current.addSource('artists', {\n                'type' : 'geojson', \n                'data' : {\n                    'type' : 'FeatureCollection', \n                    'features' : features\n                }\n            })\n\n\n        //create a marker(img) for each artists (feature) object\n        for (let i = 0; i < features.length; i++){\n            //create divs\n            const marker = document.createElement('div')\n            marker.className = 'marker'\n\n            //add the divs to mapboxgl marker \n            new mapboxgl.Marker(marker).setLngLat(features[i].geometry.coordinates).addTo(map.current)\n            \n            //create array for all markers\n            const markers = document.getElementsByClassName('marker')\n            \n                //add functionality and design (src for marker img and scaleControl)  \n                for (let i = 0; i < markers.length; i++){\n                    markers[i].addEventListener('click', () => {\n                        redirectToArtistProfilePage(features[i].properties.artistName, features[i].properties.artistDatabaseId, features[i].properties.artistSpotifyId)\n                    })\n                \n                    //add url to background img\n                    markers[i].style.backgroundImage = `url(${features[i].properties.artistPicture})`\n\n                    //artistName\n                    markers[i].innerHTML = `<p className=\"artistNameInMarker\">${features[i].properties.artistName}</p>`\n                    \n                    //resize markers in zoom\n                    map.current.on('zoom', () => {\n                        const initialZoom = 9.255562090280671 //even if zoom is set to 8.5???\n\n                        let markerSize = (Number((map.current.getZoom()) - initialZoom) * 15) + 30\n                        markers[i].style.height = `${markerSize}px`\n                        markers[i].style.width = `${markerSize}px`\n\n                        let nameSize = ((Number((map.current.getZoom()) - initialZoom) * 5) + 10) \n                        markers[i].innerHTML = `<p className=\"artistNameInMarker\" style='font-size:${nameSize}px'>${features[i].properties.artistName}</p>`\n                    })\n                }\n            }\n        })   \n}, [])\n\n    \n\n\n\n    return (\n        <div>\n          <div ref={mapContainer} className=\"map-container\" />\n        </div>\n    )\n}\n\nexport default Map\n","import '../src/style/App.css';\nimport '../src/style/Track.css';\nimport '../src/style/Home.css'\n\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n\n//pages\nimport Home from './pages/Home';\nimport ArtistProfile from './pages/ArtistProfile';\nimport Map from './pages/Map';\n\n\n//components\n//import Nav from './components/Nav'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes>\n\n          <Route\n            exact path=\"/\"\n            element={<Home />}\n          />\n\n          <Route \n            exact path=\"/map\"\n            element={<Map />}\n          />\n\n          <Route \n            exact path=\"/map/:artistName\"\n            element={<ArtistProfile />}\n          />\n\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Global } from '@emotion/react'\n\nconst Fonts = () => (\n  <Global\n    styles={`\n      \n      @font-face {\n        font-family: 'PhillySans';\n        font-style: normal;\n        font-weight: 700;\n        font-display: swap;\n        src: url('../fonts/PhillySans.woff') format('woff')\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      \n      @font-face {\n        font-family: 'PhillySans';\n        font-style: normal;\n        font-weight: 400;\n        font-display: swap;\n        src: url('../fonts/PhillySans.woff') format('woff')\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      `}\n  />\n)\n\nexport default Fonts","import { extendTheme } from '@chakra-ui/react'\n\n\nconst theme = extendTheme({\n    fonts: {\n        heading: 'PhillySans',\n        body : 'PhillySans',\n    },\n\n    config: {\n        initialColorMode: 'light',\n        useSystemColorMode: false,\n    }\n})\n\nexport default theme","import * as React from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { ChakraProvider } from '@chakra-ui/react'\nimport Fonts from '../src/components/Fonts'\nimport theme from '../src/style/theme'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <Fonts />\n        <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}