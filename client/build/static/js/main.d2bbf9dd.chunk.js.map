{"version":3,"sources":["pages/Home.js","logos/spotifyLogo.png","logos/appleMusicLogo.png","logos/youtubeLogo.png","logos/instagramLogo.png","components/Track.js","components/AppLogoWithLink.js","components/ArtistProfileHeader.js","pages/ArtistProfile.js","pages/Map.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","email","setEmail","to","value","onChange","e","target","placeholder","type","onClick","requestBody","axios","post","href","Track","album","artistName","artistDatabaseId","track","pauseTrack","trackName","document","getElementById","pause","innerHTML","style","animationPlayState","playOrPauseTrack","audios","getElementsByClassName","clickedAudio","paused","audio","id","split","play","trackCover","animationName","animationDuration","duration","animationIterationCount","animationTimingFunction","playTrack","ontimeupdate","currentTime","resetTrack","className","name","images","url","artists","length","featuresString","artist","slice","createFeaturesInfo","album_type","onPlay","addSnippetPlayed","src","preview_url","AppLogoWithLink","app","link","API_URL","addSpotifyProfileVisit","spotifyLogo","alt","addAppleMusicProfileVisit","appleMusicLogo","addYoutubeProfileVisit","youtubeLogo","addInstagramProfileVisit","instagramLogo","ArtistProfileHeader","artistPicture","releasedMusic","ArtistProfile","setArtistName","setArtistDatabaseId","setArtistPicture","setReleasedMusic","links","setLinks","topTracks","setTopTracks","getArtistsIds","a","artistIds","localStorage","getItem","getSpotifyData","spotifyId","response","data","getDataBaseData","dataBaseId","useEffect","then","ids","spotifyData","console","log","albums","trackCount","singlesCount","albumCount","total_tracks","countTracks","dataBaseData","_id","spotifyLink","appleMusicLink","youtubeLink","instagramLink","addTrapMapProfileVisit","map","Map","mapContainer","useRef","berlinCenter","berlinBounds","mapboxgl","accessToken","features","get","res","feature","picture","spotifyID","coordinates","push","artistToFeatures","current","container","center","zoom","minZoom","maxBounds","on","addSource","i","el","createElement","Marker","setLngLat","geometry","addTo","markers","addEventListener","artistSpotifyId","properties","Storage","setItem","window","location","backgroundImage","size","Number","getZoom","height","width","ref","Nav","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d2bbf9dd.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport { useState } from 'react'\nimport axios from 'axios'\n\nfunction Home() {\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n    const [email, setEmail] = useState(\"\")\n\n    const singUpForBetaKey = () => {\n        const requestBody = {email}\n        axios.post(`${API_URL}/traffic/addSignUpForBetaKey`, requestBody)\n    }\n\n    return (\n        <div>\n            <h1>welcome to trap map</h1>\n\n            <p>new plattfrom to discover music: no algorithms, no playlists, just you and the music</p>\n            <Link to=\"/map\">\n                <button>check out the demo version</button>\n            </Link>\n\n            <p>leveraging blockchain technology to build the plattform with you</p>\n\n            <h5>some timeline</h5>\n\n            <h2>sign-up for the beta-key of the official trap map app</h2>\n            <input \n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                placeholder=\"your email adress\"\n                type=\"email\"\n            >\n            </input>\n\n            <button onClick={singUpForBetaKey}>sign up</button>\n\n            <h2>do you want to get on the map? DM us on insta</h2><a href=\"https://www.instagram.com/mapmusic.berlin/\">insta</a>\n\n        </div>\n    )\n}\n\nexport default Home","export default __webpack_public_path__ + \"static/media/spotifyLogo.8eef091b.png\";","export default __webpack_public_path__ + \"static/media/appleMusicLogo.2228dbd7.png\";","export default __webpack_public_path__ + \"static/media/youtubeLogo.6b5588fd.png\";","export default __webpack_public_path__ + \"static/media/instagramLogo.f3459bc3.png\";","import axios from 'axios'\n\n//icons\n\nfunction Track({artistName, artistDatabaseId, track}) {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n\n    //create strings for additional trackrelated info \n    const createFeaturesInfo = (artists) => {\n        if (artists.length === 1){\n            return ''\n        }\n        let featuresString = \"feat: \"\n        for (let artist of artists){\n            if (artistName !== artist.name){\n                featuresString += `${artist.name}, `\n            } \n        }\n        return featuresString.slice(0, -2)\n    }\n\n    const createReleaseInfo = (album) => {\n        if (album.album_type === \"single\"){\n            return `single`\n        }\n\n        if (album.album_type === \"album\"){\n            return `on album: ${album.name}`\n        }\n    }\n\n\n    //functions to handle track behavior\n    const playTrack = (trackName) => {\n        const track = document.getElementById(`audioPlayer:${trackName}`)\n        track.play()\n        \n        const playPauseButton = document.getElementById(`playPauseButton:${trackName}`)\n        playPauseButton.innerHTML = 'pause'\n\n        \n        //add style attributes to spin\n        const trackCover = document.getElementById(`trackCover:${trackName}`)\n        trackCover.style.animationName = 'spinningCover'\n        trackCover.style.animationDuration = `${track.duration / 5}s`\n        trackCover.style.animationIterationCount = \"5\"\n        trackCover.style.animationTimingFunction = 'linear'\n        trackCover.style.animationPlayState = 'running'\n    }\n\n    const pauseTrack = (trackName) => {\n        const track = document.getElementById(`audioPlayer:${trackName}`) \n        track.pause()\n\n        const playPauseButton = document.getElementById(`playPauseButton:${trackName}`)\n        playPauseButton.innerHTML = 'play'\n\n        //add style attribute to pause spinning animation\n        const trackCover = document.getElementById(`trackCover:${trackName}`)\n        trackCover.style.animationPlayState = 'paused'\n    }\n\n    const resetTrack = (trackName) => {\n        const playPauseButton = document.getElementById(`playPauseButton:${trackName}`)\n        playPauseButton.innerHTML = 'play'\n    }\n\n\n    //handle click on play/pause button => All the track functions are used here\n    const playOrPauseTrack = (trackName) => {\n        const audios = document.getElementsByClassName('audioPlayer')\n        const clickedAudio = document.getElementById(`audioPlayer:${trackName}`)\n             \n        if (clickedAudio.paused){\n            //pause all other tracks\n            for (let audio of audios){\n                pauseTrack(audio.id.split(\":\")[1])\n            }\n            //play clicked track\n            playTrack(trackName)\n                \n        } else {\n            //pause the track \n            pauseTrack(trackName)\n        }\n\n        //reset track after its finished\n        clickedAudio.ontimeupdate = () => {\n            if (clickedAudio.currentTime === clickedAudio.duration){\n                resetTrack(trackName)\n            }\n        }\n    }\n\n    \n    //traffic\n    const addSnippetPlayed = (artistDatabaseId) => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addSnippetPlayed`, requestBody)\n    }\n\n\n    return (\n        <div className=\"track\">\n            <div className=\"trackCoverWrapper\">\n                <div id={`trackCover:${track.name}`} className='trackCover' style={{'backgroundImage' : `url(${track.album.images[1].url})`}}>\n                    <div className=\"trackCoverInnerCircle\"></div>\n                </div>\n            </div>\n\n            <div className=\"trackTitleAndAlbum\">\n                <h4>{`${track.name} ${createFeaturesInfo(track.artists)}`}</h4>\n                <p>{createReleaseInfo(track.album)}</p>\n            </div>\n\n            <audio id={`audioPlayer:${track.name}`} className='audioPlayer' onPlay={() => {addSnippetPlayed(artistDatabaseId)}}>\n                <source src={track.preview_url} type=\"audio/mp3\" />\n            </audio> \n\n            <div className=\"playPauseButtonWrapper\">\n                <div id={`playPauseButton:${track.name}`} className='playPauseButton' onClick={() => {playOrPauseTrack(track.name)}}>play</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Track\n","import axios from 'axios'\n\nimport spotifyLogo from '../logos/spotifyLogo.png'\nimport appleMusicLogo from '../logos/appleMusicLogo.png'\nimport youtubeLogo from '../logos/youtubeLogo.png'\nimport instagramLogo from '../logos/instagramLogo.png'\n\nfunction AppLogoWithLink({app, link, artistDatabaseId}) {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    const addSpotifyProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addSpotifyProfileVisit`, requestBody)\n    }\n\n    const addAppleMusicProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addAppleMusicProfileVisit`, requestBody)\n    }\n\n    const addYoutubeProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addYoutubeProfileVisit`, requestBody)\n    }\n\n    const addInstagramProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addInstagramProfileVisit`, requestBody)\n    }\n\n\n    \n    if (app === \"spotify\"){\n        return (\n            <a href={link} onClick={() => {addSpotifyProfileVisit()}}>\n                <img className=\"appLogo\" src={spotifyLogo} alt=\"spotify logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"appleMusic\"){\n        return (\n            <a href={link} onClick={() => {addAppleMusicProfileVisit()}}>\n                <img className=\"appLogo\" src={appleMusicLogo} alt=\"apple music logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"youtube\"){\n        return (\n            <a href={link} onClick={() => {addYoutubeProfileVisit()}}>\n                <img className=\"appLogo\" src={youtubeLogo} alt=\"youtube logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"instagram\"){\n        return (\n            <a href={link} onClick={() => {addInstagramProfileVisit()}}>\n                <img  className=\"appLogo\" src={instagramLogo} alt=\"instagram logo\"/>\n            </a>\n        )\n    }\n}\n\nexport default AppLogoWithLink\n","import React from 'react'\n\nfunction ArtistProfileHeader({artistName, artistPicture, releasedMusic}) {\n    return (\n        <div className=\"artistProfileHeader\">\n            <img src={artistPicture} alt=\"artist profile\" />\n            <div className=\"artistNameAndReleasedMusic\">\n                <h1>{artistName}</h1>\n                <h4>{releasedMusic}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default ArtistProfileHeader\n\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport spotifyLogo from '../logos/spotifyLogo.png'\nimport appleMusicLogo from '../logos/appleMusicLogo.png'\nimport youtubeLogo from '../logos/youtubeLogo.png'\nimport instagramLogo from '../logos/instagramLogo.png'\n\nimport Track from '../components/Track'\nimport AppLogoWithLink from '../components/AppLogoWithLink'\nimport ArtistProfileHeader from '../components/ArtistProfileHeader'\n\n\nfunction ArtistProfile() {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    //artist info\n    const [artistName, setArtistName] = useState(\"\")\n    const [artistDatabaseId, setArtistDatabaseId] = useState(\"\")\n    const [artistPicture, setArtistPicture] = useState(\"\")\n    const [releasedMusic, setReleasedMusic] = useState(\"\")\n    const [links, setLinks] = useState([])\n    const [topTracks, setTopTracks] = useState([])\n    \n\n    //music related functions\n    const countTracks = (albums) => {\n        let trackCount = 0\n        let singlesCount = 0\n        let albumCount = 0\n\n        for (let album of albums){\n            if (album.album_type === \"single\"){\n                trackCount++\n                singlesCount++\n            } else if (album.album_type === \"album\"){\n                trackCount += album.total_tracks\n                albumCount++\n            }\n        }\n\n\n        return `tracks : ${trackCount}, singles : ${singlesCount}, albums : ${albumCount}`\n    }\n\n    const createFeaturesString = (artists) => {\n        let featuresString = \"feat: \"\n        for (let artist of artists){\n            if (artistName !== artist.name){\n                featuresString += `${artist.name}, `\n            } \n        }\n        return featuresString.slice(0, -2)\n    }\n\n\n    //fetch data function\n    const getArtistsIds =  async () => {\n        const artistIds = localStorage.getItem('artistIds')\n        return artistIds.split(':')\n    }\n\n    const getSpotifyData = async (spotifyId) => {\n        const requestBody = {spotifyId}\n\n        const response = await axios.post(`${API_URL}/spotify/loadArtistProfile`, requestBody)\n        const data = await response\n\n        return data\n    }\n\n    const getDataBaseData = async (dataBaseId) => {\n        const requestBody = {dataBaseId}\n\n        const response = await axios.post(`${API_URL}/dataBase/artistProfile`, requestBody)\n        const data = await response\n\n        return data\n    }\n    \n\n    //traffic functions\n    const addTrapMapProfileVisit = (dataBaseId) => {\n        let requestBody = {dataBaseId}\n        axios.post(`${API_URL}/traffic/addTrapMapProfileVisit`, requestBody)\n    }\n\n    \n\n    useEffect( () => {\n        \n        getArtistsIds()\n            .then(ids => {\n                getSpotifyData(ids[0])\n                    .then(spotifyData => { \n                        console.log(spotifyData)\n                        //header\n                        setArtistName(spotifyData.data[0].name)\n                        setArtistPicture(spotifyData.data[0].images[0].url)\n                        setReleasedMusic(countTracks(spotifyData.data[2]))\n\n                        //tracks\n                        setTopTracks(spotifyData.data[1])\n                })\n\n                getDataBaseData(ids[1])\n                    .then(dataBaseData => {\n                        setArtistDatabaseId(dataBaseData.data._id)\n                        //header\n                        setLinks([\n                            [\"spotify\",  dataBaseData.data.spotifyLink],\n                            [\"appleMusic\",  dataBaseData.data.appleMusicLink],\n                            [\"youtube\" , dataBaseData.data.youtubeLink],\n                            [\"instagram\" , dataBaseData.data.instagramLink]\n                        ])\n\n                        //add trapMap visits\n                        addTrapMapProfileVisit(dataBaseData.data._id)\n                    })\n\n            })        \n    }, [])\n\n    return (\n        <div className=\"artistProfile\">\n            <ArtistProfileHeader artistName={artistName} artistPicture={artistPicture} releasedMusic={releasedMusic} />\n\n            <div className=\"links\">\n                {links.map(link => {\n                    return (\n                        <AppLogoWithLink app={link[0]} link={link[1]} artistDatabaseId={artistDatabaseId} />\n                    )\n                })}\n            </div>\n\n            <div className=\"tracks\">\n                {topTracks.map(track => {\n                    return (\n                        <Track track={track} artistName={artistName} artistDatabaseId={artistDatabaseId}/>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default ArtistProfile\n\n\n","import React from 'react'\nimport { useEffect, useRef } from 'react'\nimport axios from 'axios'\n\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\n\n\nfunction Map() {\n\n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n    const CLIENT_URL = 'https://trapmapversion2.herokuapp.com'\n    \n    //for development\n    // const CLIENT_URL = 'http://localhost:3000'\n    // const API_URL = 'http://localhost:5005'\n    \n    \n    //map props\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const berlinCenter = [13.404954, 52.520008]\n    const berlinBounds = [\n        [12.75, 52.25],\n        [14, 52.75]\n    ]\n\n    mapboxgl.accessToken = \"pk.eyJ1Ijoiam9vc3R3bWQiLCJhIjoiY2t1NDQ3NmJqMXRwbzJwcGM5a3FuY3B3dCJ9.yyon_mO5Y9sI1WgD-XFDRQ\"\n\n\n    //change the db artist data into mapboxgl format\n    const features = []\n    const artistToFeatures = (artists) => {\n        for (let artist of artists){\n            const feature = {\n                'type' : 'feature',\n\n                'properties' : {\n                    'artistName' : artist.name,\n                    'artistPicture' : artist.picture, \n                    'artistDatabaseId' : artist._id,\n                    'artistSpotifyId' : artist.spotifyID\n                },\n\n                'geometry' : {\n                    'type' : 'Point',\n                    'coordinates' : artist.coordinates\n                }\n            }\n        \n            features.push(feature)\n        }\n    }\n\n\n    //create function that enables the marker onClick function\n    //to send ids to the following page\n\n    const sendArtistIds = (artistDatabaseId, artistSpotifyId) => {\n\n        if (typeof(Storage) !== \"undefined\") {\n            localStorage.setItem('artistIds', `${artistSpotifyId}:${artistDatabaseId}`);\n        } else {\n            // Sorry! No Web Storage support..\n        }\n    }   \n\n    //build redirect url\n    const redirectToArtistProfilePage = (artistName) => {\n        window.location.href = `${CLIENT_URL}/map/${artistName}`\n        \n    }\n\n    useEffect(() => {\n\n        //get all artist data form db\n        axios.get(`${API_URL}/dataBase/map`)\n            .then(res => {\n                //chnage data into mapboxgl format with function\n                artistToFeatures(res.data)\n            })\n\n        \n        //create the map object\n        if (map.current) return; // initialize map only once\n            map.current = new mapboxgl.Map({        \n            container: mapContainer.current,\n            style: 'mapbox://styles/joostwmd/ckufanbzo4qlm18qj3w744lbx',\n            center: berlinCenter,\n            zoom: 8.5,\n            minZoom : 8.5,\n            maxBounds : berlinBounds\n        })\n\n        //load artist data in mapbox format onto the map object\n        map.current.on('load', () => {\n            map.current.addSource('artists', {\n                'type' : 'geojson', \n                'data' : {\n                    'type' : 'FeatureCollection', \n                    'features' : features\n                }\n            })\n\n\n        //create a marker(img) for each artists (feature) object\n        for (let i = 0; i < features.length; i++){\n            //create divs\n            const el = document.createElement('div')\n            //const el = document.createElement('img')\n            el.className = 'marker'\n\n            //add the divs to mapboxgl marker \n            new mapboxgl.Marker(el).setLngLat(features[i].geometry.coordinates).addTo(map.current)\n                    \n            //create array for all markers\n            const markers = document.getElementsByClassName('marker')\n                \n                //add functionality and design (src for marker img and scaleControl)  \n                for (let i = 0; i < markers.length; i++){\n                    markers[i].addEventListener('click', () => {\n                        sendArtistIds(features[i].properties.artistDatabaseId, features[i].properties.artistSpotifyId)\n                        redirectToArtistProfilePage(features[i].properties.artistName)\n                    })\n                    \n                    //add url to background img\n                    markers[i].style.backgroundImage = `url(${features[i].properties.artistPicture})`\n\n                    //add image src\n                    //markers[i].setAttribute('src', `${features[i].properties.artistPicture}`)\n                    \n\n                    //resize markers in zoom\n                    map.current.on('zoom', () => {\n                        const initialZoom = 9.255562090280671 //even if zoom is set to 8.5???\n                        let size = (Number((map.current.getZoom()) - initialZoom) * 15) + 30\n                        markers[i].style.height = `${size}px`\n                        markers[i].style.width = `${size}px`\n                    })\n                }\n            }\n        })\n}, [])\n\n    \n\n\n\n    return (\n        <div>\n          <div ref={mapContainer} className=\"map-container\" />\n        </div>\n    )\n}\n\nexport default Map\n","import { Link } from 'react-router-dom'\n\nfunction Nav() {\n    return (\n        <div id=\"nav\">\n            <Link to=\"/\">\n                <button>home</button>\n            </Link>\n\n            <Link to=\"/map\">\n                <button>map</button>\n            </Link>\n        </div>\n    )\n}\n\nexport default Nav","import '../src/style/App.css';\nimport '../src/style/Track.css'\n\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n\n//pages\nimport Home from './pages/Home';\nimport ArtistProfile from './pages/ArtistProfile';\nimport Map from './pages/Map';\n\n\n//components\nimport Nav from './components/Nav'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Nav />\n        <Routes>\n\n          <Route\n            exact path=\"/\"\n            element={<Home />}\n          />\n\n          <Route \n            exact path=\"/map\"\n            element={<Map />}\n          />\n\n          <Route \n            exact path=\"/map/:artistName\"\n            element={<ArtistProfile />}\n          />\n\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}