{"version":3,"sources":["pages/Home.js","components/Track.js","logos/spotifyLogo.png","logos/appleMusicLogo.png","logos/youtubeLogo.png","logos/instagramLogo.png","components/AppLogoWithLink.js","components/ArtistProfileHeader.js","pages/ArtistProfile.js","pages/Map.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","email","setEmail","to","value","onChange","e","target","placeholder","type","onClick","requestBody","axios","post","href","Track","artistName","artistDatabaseId","track","pauseTrack","trackName","document","getElementById","pause","trackTitle","style","color","fontSize","playOrPauseTrack","audios","getElementsByClassName","paused","audio","id","split","play","playTrack","className","name","album","images","url","artists","length","featuresString","artist","slice","createFeaturesInfo","onPlay","addSnippetPlayed","src","preview_url","AppLogoWithLink","app","link","API_URL","addSpotifyProfileVisit","spotifyLogo","alt","addAppleMusicProfileVisit","appleMusicLogo","addYoutubeProfileVisit","youtubeLogo","addInstagramProfileVisit","instagramLogo","ArtistProfileHeader","artistPicture","releasedMusic","ArtistProfile","setArtistName","setArtistDatabaseId","setArtistPicture","setReleasedMusic","links","setLinks","topTracks","setTopTracks","getArtistsIds","a","window","location","pathname","getSpotifyData","spotifyId","response","data","getDataBaseData","dataBaseId","useEffect","then","ids","dataBaseData","_id","spotifyLink","appleMusicLink","youtubeLink","instagramLink","addTrapMapProfileVisit","spotifyData","albums","trackCount","singlesCount","albumCount","album_type","total_tracks","countTracks","map","Map","mapContainer","useRef","berlinCenter","berlinBounds","mapboxgl","accessToken","features","console","log","get","res","feature","picture","spotifyID","coordinates","push","artistToFeatures","current","container","center","zoom","minZoom","maxBounds","on","addSource","i","el","createElement","Marker","setLngLat","geometry","addTo","markers","addEventListener","artistSpotifyId","properties","backgroundImage","size","Number","getZoom","height","width","ref","Nav","CLIENT_URL","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.464e5316.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport { useState } from 'react'\nimport axios from 'axios'\n\nfunction Home() {\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    const [email, setEmail] = useState(\"\")\n\n    const singUpForBetaKey = () => {\n        const requestBody = {email}\n        axios.post(`${API_URL}/traffic/addSignUpForBetaKey`, requestBody)\n    }\n\n    return (\n        <div>\n            <h1>welcome to trap map</h1>\n\n            <p>new plattfrom to discover music: no algorithms, no playlists, just you and the music</p>\n            <Link to=\"/map\">\n                <button>check out the demo version</button>\n            </Link>\n            \n            <h2>sign-up for the beta-key of the official trap map app</h2>\n            <input \n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                placeholder=\"your email adress\"\n                type=\"email\"\n            >\n            </input>\n\n            <button onClick={singUpForBetaKey}>sign up</button>\n\n            <h2>do you want to get on the map? DM us on insta</h2><a href=\"https://www.instagram.com/mapmusic.berlin/\">insta</a>\n\n        </div>\n    )\n}\n\nexport default Home","import axios from 'axios'\n\n//icons\n\nfunction Track({artistName, artistDatabaseId, track}) {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n\n    //create strings for additional trackrelated info \n    const createFeaturesInfo = (artists) => {\n        if (artists.length === 1){\n            return ''\n        }\n        let featuresString = \"feat: \"\n        for (let artist of artists){\n            if (artistName !== artist.name){\n                featuresString += `${artist.name}, `\n            } \n        }\n        return featuresString.slice(0, -2)\n    }\n\n    const createReleaseInfo = (album) => {\n        if (album.album_type === \"single\"){\n            return `single`\n        }\n\n        if (album.album_type === \"album\"){\n            return `on album: ${album.name}`\n        }\n    }\n\n\n    //functions to handle track behavior\n    const playTrack = (trackName) => {\n        const track = document.getElementById(`audioPlayer:${trackName}`)\n        track.play()\n         \n        //add visual feedback\n        const trackTitle = document.getElementById(`trackTitle:${trackName}`)\n        trackTitle.style.color = 'blue'\n        trackTitle.style.fontSize = '40px'\n        // //add style attributes to spin\n        // const vinylRecord = document.getElementById(`vinylRecordCurve:${trackName}`)\n        // vinylRecord.style.animationName = 'spinningVinylRecord'\n        // vinylRecord.style.animationDuration = `${track.duration / 5}s`\n        // vinylRecord.style.animationIterationCount = \"5\"\n        // vinylRecord.style.animationTimingFunction = 'linear'\n        // vinylRecord.style.animationPlayState = 'running'\n    }\n\n    const pauseTrack = (trackName) => {\n        const track = document.getElementById(`audioPlayer:${trackName}`) \n        track.pause()\n\n        //remove visual feedback\n        const trackTitle = document.getElementById(`trackTitle:${trackName}`)\n        trackTitle.style.color = 'black'\n        trackTitle.style.fontSize = '25px'\n\n        // //add style attribute to pause spinning animation\n        // const vinylRecord = document.getElementById(`vinylRecordCurve:${trackName}`)\n        // vinylRecord.style.animationPlayState = 'paused'\n    }\n\n    //handle click on play/pause button => All the track functions are used here\n    const playOrPauseTrack = (trackName) => {\n        const audios = document.getElementsByClassName('audioPlayer')\n        const clickedAudio = document.getElementById(`audioPlayer:${trackName}`)\n             \n        if (clickedAudio.paused){\n            //pause all other tracks\n            for (let audio of audios){\n                pauseTrack(audio.id.split(\":\")[1])\n            }\n            //play clicked track\n            playTrack(trackName)\n                \n        } else {\n            //pause the track \n            pauseTrack(trackName)\n        }\n    }\n\n    \n    //traffic\n    const addSnippetPlayed = (artistDatabaseId) => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addSnippetPlayed`, requestBody)\n    }\n\n\n    return (\n        <div className=\"track\" onClick={() => {playOrPauseTrack(track.name)}}>\n            <div id={`trackCover:${track.name}`} className='trackCover' style={{'backgroundImage' : `url(${track.album.images[1].url})`}}/>\n\n            <div className=\"trackTitleAndAlbum\">\n                <div id={`trackTitle:${track.name}`} className=\"trackTitle\">{`${track.name} ${createFeaturesInfo(track.artists)}`}</div>\n                {/* <p>{createReleaseInfo(track.album)}</p> */}\n            </div>\n\n            <audio id={`audioPlayer:${track.name}`} className='audioPlayer' onPlay={() => {addSnippetPlayed(artistDatabaseId)}}>\n                <source src={track.preview_url} type=\"audio/mp3\" />\n            </audio>\n        </div>\n    )\n}\n\nexport default Track\n","export default __webpack_public_path__ + \"static/media/spotifyLogo.8eef091b.png\";","export default __webpack_public_path__ + \"static/media/appleMusicLogo.2228dbd7.png\";","export default __webpack_public_path__ + \"static/media/youtubeLogo.6b5588fd.png\";","export default __webpack_public_path__ + \"static/media/instagramLogo.f3459bc3.png\";","import axios from 'axios'\n\nimport spotifyLogo from '../logos/spotifyLogo.png'\nimport appleMusicLogo from '../logos/appleMusicLogo.png'\nimport youtubeLogo from '../logos/youtubeLogo.png'\nimport instagramLogo from '../logos/instagramLogo.png'\n\nfunction AppLogoWithLink({app, link, artistDatabaseId}) {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    const addSpotifyProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addSpotifyProfileVisit`, requestBody)\n    }\n\n    const addAppleMusicProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addAppleMusicProfileVisit`, requestBody)\n    }\n\n    const addYoutubeProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addYoutubeProfileVisit`, requestBody)\n    }\n\n    const addInstagramProfileVisit = () => {\n        let requestBody = {artistDatabaseId}\n        axios.post(`${API_URL}/traffic/addInstagramProfileVisit`, requestBody)\n    }\n\n\n    \n    if (app === \"spotify\"){\n        return (\n            <a href={link} onClick={() => {addSpotifyProfileVisit()}}>\n                <img className=\"appLogo\" src={spotifyLogo} alt=\"spotify logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"appleMusic\"){\n        return (\n            <a href={link} onClick={() => {addAppleMusicProfileVisit()}}>\n                <img className=\"appLogo\" src={appleMusicLogo} alt=\"apple music logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"youtube\"){\n        return (\n            <a href={link} onClick={() => {addYoutubeProfileVisit()}}>\n                <img className=\"appLogo\" src={youtubeLogo} alt=\"youtube logo\"/>\n            </a>\n        )\n    }\n\n    if (app === \"instagram\"){\n        return (\n            <a href={link} onClick={() => {addInstagramProfileVisit()}}>\n                <img  className=\"appLogo\" src={instagramLogo} alt=\"instagram logo\"/>\n            </a>\n        )\n    }\n}\n\nexport default AppLogoWithLink\n","import React from 'react'\n\nfunction ArtistProfileHeader({artistName, artistPicture, releasedMusic}) {\n    return (\n        <div className=\"artistProfileHeader\">\n            <img src={artistPicture} alt=\"artist profile\" />\n            <div className=\"artistNameAndReleasedMusic\">\n                <h1>{artistName}</h1>\n                {/* <h4>{releasedMusic}</h4> */}\n            </div>\n        </div>\n    )\n}\n\nexport default ArtistProfileHeader\n\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport Track from '../components/Track'\nimport AppLogoWithLink from '../components/AppLogoWithLink'\nimport ArtistProfileHeader from '../components/ArtistProfileHeader'\n\n\nfunction ArtistProfile() {\n\n    //for develpoment\n    //const API_URL = 'http://localhost:5005'\n    \n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n\n    //artist info\n    const [artistName, setArtistName] = useState(\"\")\n    const [artistDatabaseId, setArtistDatabaseId] = useState(\"\")\n    const [artistPicture, setArtistPicture] = useState(\"\")\n    const [releasedMusic, setReleasedMusic] = useState(\"\")\n    const [links, setLinks] = useState([])\n    const [topTracks, setTopTracks] = useState([])\n    \n\n    //music related functions\n    const countTracks = (albums) => {\n        let trackCount = 0\n        let singlesCount = 0\n        let albumCount = 0\n\n        for (let album of albums){\n            if (album.album_type === \"single\"){\n                trackCount++\n                singlesCount++\n            } else if (album.album_type === \"album\"){\n                trackCount += album.total_tracks\n                albumCount++\n            }\n        }\n\n\n        return `tracks : ${trackCount}, singles : ${singlesCount}, albums : ${albumCount}`\n    }\n\n    const createFeaturesString = (artists) => {\n        let featuresString = \"feat: \"\n        for (let artist of artists){\n            if (artistName !== artist.name){\n                featuresString += `${artist.name}, `\n            } \n        }\n        return featuresString.slice(0, -2)\n    }\n\n\n    //fetch data function\n    const getArtistsIds = async () => {\n        return [window.location.pathname.split(\":\")[1], window.location.pathname.split(\":\")[2]]\n    }\n\n    const getSpotifyData = async (spotifyId) => {\n        const requestBody = {spotifyId}\n\n        const response = await axios.post(`${API_URL}/spotify/loadArtistProfile`, requestBody)\n        const data = await response\n\n        return data\n    }\n\n    const getDataBaseData = async (dataBaseId) => {\n        const requestBody = {dataBaseId}\n\n        const response = await axios.post(`${API_URL}/dataBase/artistProfile`, requestBody)\n        const data = await response\n\n        return data\n    }\n    \n\n    //traffic functions\n    const addTrapMapProfileVisit = (dataBaseId) => {\n        let requestBody = {dataBaseId}\n        axios.post(`${API_URL}/traffic/addTrapMapProfileVisit`, requestBody)\n    }\n\n    \n\n    useEffect( () => {\n        \n        getArtistsIds()\n            .then(ids => {\n                getDataBaseData(ids[0])\n                .then(dataBaseData => {\n                    setArtistDatabaseId(dataBaseData.data._id)\n                    //header\n                    setLinks([\n                        [\"spotify\",  dataBaseData.data.spotifyLink],\n                        [\"appleMusic\",  dataBaseData.data.appleMusicLink],\n                        [\"youtube\" , dataBaseData.data.youtubeLink],\n                        [\"instagram\" , dataBaseData.data.instagramLink]\n                    ])\n\n                    //add trapMap visits\n                    addTrapMapProfileVisit(dataBaseData.data._id)\n                })\n\n                getSpotifyData(ids[1])\n                    .then(spotifyData => { \n                        //header\n                        setArtistName(spotifyData.data[0].name)\n                        setArtistPicture(spotifyData.data[0].images[0].url)\n                        setReleasedMusic(countTracks(spotifyData.data[2]))\n\n                        //tracks\n                        setTopTracks(spotifyData.data[1])\n                })\n            })        \n    }, [])\n\n    return (\n        <div className=\"artistProfile\">\n            <ArtistProfileHeader artistName={artistName} artistPicture={artistPicture} releasedMusic={releasedMusic} />\n\n            <div className=\"links\">\n                {links.map(link => {\n                    return (\n                        <AppLogoWithLink app={link[0]} link={link[1]} artistDatabaseId={artistDatabaseId} />\n                    )\n                })}\n            </div>\n\n            <div className=\"tracks\">\n                {topTracks.map(track => {\n                    //makes sure that every track is playable\n                    if (track.preview_url !== null){\n                        return (\n                            <Track track={track} artistName={artistName} artistDatabaseId={artistDatabaseId}/>\n                    )\n                    }\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default ArtistProfile\n\n\n","import React from 'react'\nimport { useEffect, useRef } from 'react'\nimport axios from 'axios'\n\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n\nfunction Map() {\n\n    const API_URL = 'https://trapmapversion2.herokuapp.com'\n    const CLIENT_URL = 'https://trapmapversion2.herokuapp.com'\n    \n    //for development\n    // const CLIENT_URL = 'http://localhost:3000'\n    // const API_URL = 'http://localhost:5005'\n    \n    \n    //map props\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const berlinCenter = [13.404954, 52.520008]\n    const berlinBounds = [\n        [12.75, 52.25],\n        [14, 52.75]\n    ]\n\n    mapboxgl.accessToken = \"pk.eyJ1Ijoiam9vc3R3bWQiLCJhIjoiY2t1NDQ3NmJqMXRwbzJwcGM5a3FuY3B3dCJ9.yyon_mO5Y9sI1WgD-XFDRQ\"\n\n\n    //change the db artist data into mapboxgl format\n    const features = []\n    const artistToFeatures = (artists) => {\n        for (let artist of artists){\n            const feature = {\n                'type' : 'feature',\n\n                'properties' : {\n                    'artistName' : artist.name,\n                    'artistPicture' : artist.picture, \n                    'artistDatabaseId' : artist._id,\n                    'artistSpotifyId' : artist.spotifyID\n                },\n\n                'geometry' : {\n                    'type' : 'Point',\n                    'coordinates' : artist.coordinates\n                }\n            }        \n            features.push(feature)\n        }\n    }\n\n    //build redirect url\n    const redirectToArtistProfilePage = (artistName, artistDatabaseId, artistSpotifyId) => {\n        window.location.href = `${CLIENT_URL}/map/${artistName}:${artistDatabaseId}:${artistSpotifyId}`\n        \n    }\n\n    useEffect(() => {\n\n        //makes sure that markers are always shown\n        if(features.length === 0){\n            console.log(\"test\")\n            //get all artist data form db\n            axios.get(`${API_URL}/dataBase/map`)\n            .then(res => {\n                //change data into mapboxgl format with function\n                artistToFeatures(res.data)\n            })\n\n    \n            //create the map object\n            if (map.current) return; // initialize map only once\n                map.current = new mapboxgl.Map({        \n                container: mapContainer.current,\n                style: 'mapbox://styles/joostwmd/ckucoygnc51gn18s0xu6mjltv', \n                center: berlinCenter,\n                zoom: 8.5,\n                minZoom : 8.5,\n                maxBounds : berlinBounds\n            })\n\n            //load artist data in mapbox format onto the map object\n            map.current.on('load', () => {\n                map.current.addSource('artists', {\n                    'type' : 'geojson', \n                    'data' : {\n                        'type' : 'FeatureCollection', \n                        'features' : features\n                    }\n                })\n\n\n            //create a marker(img) for each artists (feature) object\n            for (let i = 0; i < features.length; i++){\n                //create divs\n                const el = document.createElement('div')\n                //const el = document.createElement('img')\n                el.className = 'marker'\n\n                //add the divs to mapboxgl marker \n                new mapboxgl.Marker(el).setLngLat(features[i].geometry.coordinates).addTo(map.current)\n                \n                //create array for all markers\n                const markers = document.getElementsByClassName('marker')\n            \n                    //add functionality and design (src for marker img and scaleControl)  \n                    for (let i = 0; i < markers.length; i++){\n                        markers[i].addEventListener('click', () => {\n                            redirectToArtistProfilePage(features[i].properties.artistName, features[i].properties.artistDatabaseId, features[i].properties.artistSpotifyId)\n                        })\n                \n                        //add url to background img\n                        markers[i].style.backgroundImage = `url(${features[i].properties.artistPicture})`\n\n                        //resize markers in zoom\n                        map.current.on('zoom', () => {\n                            const initialZoom = 9.255562090280671 //even if zoom is set to 8.5???\n                            let size = (Number((map.current.getZoom()) - initialZoom) * 15) + 30\n                            markers[i].style.height = `${size}px`\n                            markers[i].style.width = `${size}px`\n                        })\n                    }\n                }\n            })\n           \n        }      \n    }, [])\n\n    \n\n\n\n    return (\n        <div>\n          <div ref={mapContainer} className=\"map-container\" />\n        </div>\n    )\n}\n\nexport default Map\n","import { Link } from 'react-router-dom'\n\nfunction Nav() {\n    //for development\n    //const CLIENT_URL = 'http://localhost:3000'\n\n    const CLIENT_URL = 'https://trapmapversion2.herokuapp.com'\n\n    const redirectToHomepage = () => {\n        window.location.href = `${CLIENT_URL}/`\n        \n    }\n\n    const redirectToMap = () => {\n        window.location.href = `${CLIENT_URL}/map/`\n        \n    }\n\n    return (\n        <div id=\"nav\">\n            <button onClick={() => {redirectToHomepage()}}>home</button>\n\n            <button onClick={() => {redirectToMap()}}>map</button>\n        </div>\n    )\n}\n\nexport default Nav","import '../src/style/App.css';\nimport '../src/style/Track.css'\n\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n\n//pages\nimport Home from './pages/Home';\nimport ArtistProfile from './pages/ArtistProfile';\nimport Map from './pages/Map';\n\n\n//components\nimport Nav from './components/Nav'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Nav />\n        <Routes>\n\n          <Route\n            exact path=\"/\"\n            element={<Home />}\n          />\n\n          <Route \n            exact path=\"/map\"\n            element={<Map />}\n          />\n\n          <Route \n            exact path=\"/map/:artistName\"\n            element={<ArtistProfile />}\n          />\n\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}